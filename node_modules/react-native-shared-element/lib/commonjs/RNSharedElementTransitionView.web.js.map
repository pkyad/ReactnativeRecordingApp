{"version":3,"sources":["RNSharedElementTransitionView.web.tsx"],"names":["RNSharedElementTransitionView","state","transition","RNSharedElementTransition","onSetRef","ref","element","destroy","props","startNode","endNode","animation","resize","align","nodePosition","setNode","node","ancestor","didSetProps","React","Component"],"mappings":"wuBAAA,oDACA,yCACA,0B,oHA2BaA,CAAAA,6B,8gBAIXC,K,CAAQ,CACNC,UAAU,CAAE,GAAIC,+BAAJ,EADN,C,OAgCAC,Q,CAAW,SAACC,GAAD,CAAc,CAC/B,GAAI,CAACA,GAAL,CAAU,OACV,GAAMC,CAAAA,OAAY,CAAGD,GAAG,CAAG,gCAAeA,GAAf,CAAH,CAAyB,IAAjD,CAF+B,GAGvBH,CAAAA,UAHuB,CAGR,MAAKD,KAHG,CAGvBC,UAHuB,CAI/BA,UAAU,CAACI,OAAX,CAAqBA,OAArB,CACD,C,2IAbuB,CACtB,MAAO,MAAP,CACD,C,mEAEsB,CACrB,KAAKL,KAAL,CAAWC,UAAX,CAAsBK,OAAtB,GACD,C,uCASQ,CAEP,MAAO,qBAAC,iBAAD,EAAM,GAAG,CAAE,KAAKH,QAAhB,iDAAP,CACD,C,4EAtC+BI,K,CAAkBP,K,CAAkB,IAEhEQ,CAAAA,SAFgE,CAQ9DD,KAR8D,CAEhEC,SAFgE,CAGhEC,OAHgE,CAQ9DF,KAR8D,CAGhEE,OAHgE,CAIhEC,SAJgE,CAQ9DH,KAR8D,CAIhEG,SAJgE,CAKhEC,MALgE,CAQ9DJ,KAR8D,CAKhEI,MALgE,CAMhEC,KANgE,CAQ9DL,KAR8D,CAMhEK,KANgE,CAOhEC,YAPgE,CAQ9DN,KAR8D,CAOhEM,YAPgE,IAS1DZ,CAAAA,UAT0D,CAS3CD,KAT2C,CAS1DC,UAT0D,CAUlEA,UAAU,CAACa,OAAX,CAAmB,KAAnB,CAA0BN,SAAS,CAACO,IAApC,CAA0CP,SAAS,CAACQ,QAApD,EACAf,UAAU,CAACa,OAAX,CAAmB,IAAnB,CAAyBL,OAAO,CAACM,IAAjC,CAAuCN,OAAO,CAACO,QAA/C,EACAf,UAAU,CAACY,YAAX,CAA0BA,YAA1B,CACAZ,UAAU,CAACS,SAAX,CAAuBA,SAAvB,CACAT,UAAU,CAACU,MAAX,CAAoBA,MAApB,CACAV,UAAU,CAACW,KAAX,CAAmBA,KAAnB,CACAX,UAAU,CAACgB,WAAX,GACA,MAAO,KAAP,CACD,C,2CA1BgDC,KAAK,CAACC,S","sourcesContent":["import * as React from 'react';\nimport { View, findNodeHandle } from 'react-native';\nimport {\n  RNSharedElementTransition,\n  RNSharedElementNodeConfig,\n  RNSharedElementAnimation,\n  RNSharedElementResize,\n  RNSharedElementAlign,\n} from './web';\n\ntype PropsType = {\n  startNode: {\n    node: RNSharedElementNodeConfig | null;\n    ancestor: RNSharedElementNodeConfig | null;\n  };\n  endNode: {\n    node: RNSharedElementNodeConfig | null;\n    ancestor: RNSharedElementNodeConfig | null;\n  };\n  nodePosition: number | any;\n  animation: RNSharedElementAnimation;\n  resize: RNSharedElementResize;\n  align: RNSharedElementAlign;\n  //onMeasure?: (event: SharedElementOnMeasureEvent) => void;\n};\ntype StateType = {\n  transition: RNSharedElementTransition;\n};\n\nexport class RNSharedElementTransitionView extends React.Component<\n  PropsType,\n  StateType\n> {\n  state = {\n    transition: new RNSharedElementTransition(),\n  };\n\n  static getDerivedStateFromProps(props: PropsType, state: StateType) {\n    const {\n      startNode,\n      endNode,\n      animation,\n      resize,\n      align,\n      nodePosition,\n    } = props;\n    const { transition } = state;\n    transition.setNode(false, startNode.node, startNode.ancestor);\n    transition.setNode(true, endNode.node, endNode.ancestor);\n    transition.nodePosition = nodePosition;\n    transition.animation = animation;\n    transition.resize = resize;\n    transition.align = align;\n    transition.didSetProps();\n    return null;\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillUnmount() {\n    this.state.transition.destroy();\n  }\n\n  private onSetRef = (ref: any) => {\n    if (!ref) return;\n    const element: any = ref ? findNodeHandle(ref) : null;\n    const { transition } = this.state;\n    transition.element = element;\n  };\n\n  render() {\n    // console.log(\"RNSharedElementTransitionView.render\");\n    return <View ref={this.onSetRef} />;\n  }\n}\n"]}