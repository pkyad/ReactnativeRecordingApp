{"version":3,"sources":["RNSharedElementStyle.ts"],"names":["interpolate","val1","val2","position","RNSharedElementStyle","layout","style","opacity","Number","backgroundColor","layout1","layout2","Rect","x","y","width","height","style1","style2","getInterpolatedLayout"],"mappings":"ocAAA,4BAEA,8B,yyBAaA,QAASA,CAAAA,WAAT,CAAqBC,IAArB,CAAmCC,IAAnC,CAAiDC,QAAjD,CAAmE,CACjE,MAAOF,CAAAA,IAAI,CAAG,CAACC,IAAI,CAAGD,IAAR,EAAgBE,QAA9B,CACD,C,GAEYC,CAAAA,oB,YAMX,8BAAYC,MAAZ,CAA0BC,KAA1B,CAAsD,yDACpD,KAAKD,MAAL,CAAcA,MAAd,CACA,KAAKC,KAAL,CAAaA,KAAb,CACA,KAAKC,OAAL,CAAeC,MAAM,CAACF,KAAK,CAACC,OAAP,CAArB,CACA,KAAKE,eAAL,CAAuB,sBAAWH,KAAK,CAACG,eAAjB,CAAvB,CACD,C,uHAGCC,O,CACAC,O,CACAR,Q,CACA,CACA,MAAO,IAAIS,WAAJ,CAAS,CACdC,CAAC,CAAEb,WAAW,CAACU,OAAO,CAACG,CAAT,CAAYF,OAAO,CAACE,CAApB,CAAuBV,QAAvB,CADA,CAEdW,CAAC,CAAEd,WAAW,CAACU,OAAO,CAACI,CAAT,CAAYH,OAAO,CAACG,CAApB,CAAuBX,QAAvB,CAFA,CAGdY,KAAK,CAAEf,WAAW,CAACU,OAAO,CAACK,KAAT,CAAgBJ,OAAO,CAACI,KAAxB,CAA+BZ,QAA/B,CAHJ,CAIda,MAAM,CAAEhB,WAAW,CAACU,OAAO,CAACM,MAAT,CAAiBL,OAAO,CAACK,MAAzB,CAAiCb,QAAjC,CAJL,CAAT,CAAP,CAMD,C,kEAGCc,M,CACAC,M,CACAf,Q,CACA,CACA,GAAME,CAAAA,MAAM,CAAGD,oBAAoB,CAACe,qBAArB,CACbF,MAAM,CAACZ,MADM,CAEba,MAAM,CAACb,MAFM,CAGbF,QAHa,CAAf,CAKA,MAAO,IAAIC,CAAAA,oBAAJ,CAAyBC,MAAzB,kBACFY,MADE,EAELV,OAAO,CAAEP,WAAW,CAACiB,MAAM,CAACV,OAAR,CAAiBW,MAAM,CAACX,OAAxB,CAAiCJ,QAAjC,CAFf,CAGLM,eAAe,CAAE,4BACfQ,MAAM,CAACR,eADQ,CAEfS,MAAM,CAACT,eAFQ,CAGfN,QAHe,CAHZ,GAAP,CASD,C","sourcesContent":["import { Rect } from './Rect';\nimport { CSSStyleDeclaration } from './types';\nimport { Color, parseColor, interpolateColor } from './Color';\n\n/*int backgroundColor = Color.TRANSPARENT;\n    float opacity = 1;\n    float borderTopLeftRadius = 0;\n    float borderTopRightRadius = 0;\n    float borderBottomLeftRadius = 0;\n    float borderBottomRightRadius = 0;\n    float borderWidth = 0;\n    int borderColor = Color.TRANSPARENT;\n    String borderStyle = \"solid\";\n    float elevation = 0;*/\n\nfunction interpolate(val1: number, val2: number, position: number) {\n  return val1 + (val2 - val1) * position;\n}\n\nexport class RNSharedElementStyle {\n  public readonly layout: Rect;\n  public readonly style: CSSStyleDeclaration;\n  public readonly opacity: number;\n  public readonly backgroundColor: Color;\n\n  constructor(layout: Rect, style: CSSStyleDeclaration) {\n    this.layout = layout;\n    this.style = style;\n    this.opacity = Number(style.opacity);\n    this.backgroundColor = parseColor(style.backgroundColor);\n  }\n\n  public static getInterpolatedLayout(\n    layout1: Rect,\n    layout2: Rect,\n    position: number\n  ) {\n    return new Rect({\n      x: interpolate(layout1.x, layout2.x, position),\n      y: interpolate(layout1.y, layout2.y, position),\n      width: interpolate(layout1.width, layout2.width, position),\n      height: interpolate(layout1.height, layout2.height, position),\n    });\n  }\n\n  public static getInterpolatedStyle(\n    style1: RNSharedElementStyle,\n    style2: RNSharedElementStyle,\n    position: number\n  ) {\n    const layout = RNSharedElementStyle.getInterpolatedLayout(\n      style1.layout,\n      style2.layout,\n      position\n    );\n    return new RNSharedElementStyle(layout, {\n      ...style1,\n      opacity: interpolate(style1.opacity, style2.opacity, position),\n      backgroundColor: interpolateColor(\n        style1.backgroundColor,\n        style2.backgroundColor,\n        position\n      ),\n    });\n  }\n\n  /* \n\n    private RNSharedElementStyle getInterpolatedStyle(\n        RNSharedElementStyle style1,\n        RNSharedElementContent content1,\n        RNSharedElementStyle style2,\n        RNSharedElementContent content2,\n        float position\n    ) {\n        RNSharedElementStyle result = new RNSharedElementStyle();\n        result.scaleType = RNSharedElementStyle.getInterpolatingScaleType(style1, style2, position);\n        result.opacity = style1.opacity + ((style2.opacity - style1.opacity) * position);\n        result.backgroundColor = getInterpolatedColor(style1.backgroundColor, style2.backgroundColor, position);\n        result.borderTopLeftRadius = style1.borderTopLeftRadius + ((style2.borderTopLeftRadius - style1.borderTopLeftRadius) * position);\n        result.borderTopRightRadius = style1.borderTopRightRadius + ((style2.borderTopRightRadius - style1.borderTopRightRadius) * position);\n        result.borderBottomLeftRadius = style1.borderBottomLeftRadius + ((style2.borderBottomLeftRadius - style1.borderBottomLeftRadius) * position);\n        result.borderBottomRightRadius = style1.borderBottomRightRadius + ((style2.borderBottomRightRadius - style1.borderBottomRightRadius) * position);\n        result.borderWidth = style1.borderWidth + ((style2.borderWidth - style1.borderWidth) * position);\n        result.borderColor = getInterpolatedColor(style1.borderColor, style2.borderColor, position);\n        result.borderStyle = style1.borderStyle;\n        result.elevation = style1.elevation + ((style2.elevation - style1.elevation) * position);\n        return result;\n    }*/\n}\n"]}