{"version":3,"sources":["RNSharedElementContent.ts"],"names":["Rect","RNSharedElementContent","element","size","Promise","resolve","style","backgroundImage","img","document","createElement","onload","x","y","width","height","onerror","url","src","substring","length","clientWidth","clientHeight","layout","content","resizeMode","reverse","contentAspectRatio","lo","aspectRatioCriteria"],"mappings":"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","sourcesContent":["import { Rect } from './Rect';\nimport { IHTMLElement } from './types';\n\nexport class RNSharedElementContent {\n  public readonly element: IHTMLElement;\n  public readonly size: Rect;\n\n  constructor(element: IHTMLElement, size: Rect) {\n    this.element = element;\n    this.size = size;\n  }\n\n  static getSize(element: IHTMLElement): Promise<Rect | null> {\n    return new Promise(resolve => {\n      if (element.style.backgroundImage) {\n        // @ts-ignore\n        const img = document.createElement('img');\n        img.onload = () => {\n          resolve(\n            new Rect({\n              x: 0,\n              y: 0,\n              width: img.width,\n              height: img.height,\n            })\n          );\n        };\n        img.onerror = () => resolve(null);\n        const url = element.style.backgroundImage;\n        img.src = url.substring(5, url.length - 2);\n        return;\n      }\n      resolve(\n        new Rect({\n          x: 0,\n          y: 0,\n          width: element.clientWidth || 0,\n          height: element.clientHeight || 0,\n        })\n      );\n    });\n  }\n\n  static getLayout(\n    layout: Rect,\n    content: RNSharedElementContent | null,\n    resizeMode: string,\n    reverse?: boolean\n  ) {\n    if (!content) return layout;\n    if (!content.element.style.backgroundImage) return layout;\n    let { width, height } = layout;\n    const contentAspectRatio = content.size.width / content.size.height;\n    const lo = width / height < contentAspectRatio;\n    const aspectRatioCriteria = reverse ? !lo : lo;\n    switch (resizeMode) {\n      case 'stretch':\n      case '100% 100%':\n        // nop\n        break;\n      case 'cover':\n        if (aspectRatioCriteria) {\n          width = height * contentAspectRatio;\n        } else {\n          height = width / contentAspectRatio;\n        }\n        break;\n      case 'center':\n        width = content.size.width;\n        height = content.size.height;\n        break;\n      case 'contain':\n      default:\n        if (aspectRatioCriteria) {\n          height = width / contentAspectRatio;\n        } else {\n          width = height * contentAspectRatio;\n        }\n        break;\n    }\n    return new Rect({\n      x: layout.x + (layout.width - width) / 2,\n      y: layout.y + (layout.height - height) / 2,\n      width,\n      height,\n    });\n  }\n}\n"]}