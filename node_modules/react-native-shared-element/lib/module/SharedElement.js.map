{"version":3,"sources":["SharedElement.tsx"],"names":["React","View","findNodeHandle","nodeFromRef","ref","isParent","parentInstance","nodeHandle","undefined","SharedElement","_node","onSetRef","props","onNode","prevProps","otherProps","Component"],"mappings":"2oBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,IAAT,CAAeC,cAAf,KAAgD,cAAhD,CAQA,MAAO,SAASC,CAAAA,WAAT,CACLC,GADK,CAELC,QAFK,CAGLC,cAHK,CAIqB,CAC1B,GAAMC,CAAAA,UAAU,CAAGH,GAAG,CAAGF,cAAc,CAACE,GAAD,CAAjB,CAAyBI,SAA/C,CACA,MAAOD,CAAAA,UAAU,CACb,CACEH,GAAG,CAAHA,GADF,CAEEG,UAAU,CAAVA,UAFF,CAGEF,QAAQ,CAAEA,QAAQ,EAAI,KAHxB,CAIEC,cAAc,CAAdA,cAJF,CADa,CAOb,IAPJ,CAQD,CAED,UAAaG,CAAAA,aAAb,0ZAOUC,KAPV,CAO4C,IAP5C,OASUC,QATV,CASqB,SAACP,GAAD,CAAc,CAC/B,MAAKM,KAAL,CAAaP,WAAW,CAACC,GAAD,CAAM,IAAN,+BAAxB,CACA,GAAI,MAAKQ,KAAL,CAAWC,MAAf,CAAuB,CACrB,MAAKD,KAAL,CAAWC,MAAX,CAAkB,MAAKH,KAAvB,EACD,CACF,CAdH,uGACqBI,SADrB,CACoD,CAChD,GAAI,CAACA,SAAS,CAACD,MAAX,EAAqB,KAAKD,KAAL,CAAWC,MAAhC,EAA0C,KAAKH,KAAnD,CAA0D,CACxD,KAAKE,KAAL,CAAWC,MAAX,CAAkB,KAAKH,KAAvB,EACD,CACF,CALH,uCAgBW,iBAIH,KAAKE,KAJF,CAELC,MAFK,aAELA,MAFK,CAGFE,UAHE,kDAKP,MAAO,qBAAC,IAAD,WAAM,GAAG,CAAE,KAAKJ,QAAhB,CAA0B,WAAW,CAAE,KAAvC,EAAkDI,UAAlD,mDAAP,CACD,CAtBH,2BAAmCf,KAAK,CAACgB,SAAzC","sourcesContent":["import * as React from 'react';\nimport { View, findNodeHandle, ViewStyle } from 'react-native';\nimport { SharedElementNode } from './types';\n\nexport type SharedElementProps = ViewStyle & {\n  children: React.ReactNode;\n  onNode: (node: SharedElementNode | null) => void;\n};\n\nexport function nodeFromRef(\n  ref: any,\n  isParent?: boolean,\n  parentInstance?: any\n): SharedElementNode | null {\n  const nodeHandle = ref ? findNodeHandle(ref) : undefined;\n  return nodeHandle\n    ? {\n        ref,\n        nodeHandle,\n        isParent: isParent || false,\n        parentInstance,\n      }\n    : null;\n}\n\nexport class SharedElement extends React.Component<SharedElementProps> {\n  componentDidUpdate(prevProps: SharedElementProps) {\n    if (!prevProps.onNode && this.props.onNode && this._node) {\n      this.props.onNode(this._node);\n    }\n  }\n\n  private _node: SharedElementNode | null = null;\n\n  private onSetRef = (ref: any) => {\n    this._node = nodeFromRef(ref, true, this);\n    if (this.props.onNode) {\n      this.props.onNode(this._node);\n    }\n  };\n\n  render() {\n    const {\n      onNode, //eslint-disable-line @typescript-eslint/no-unused-vars\n      ...otherProps\n    } = this.props;\n    return <View ref={this.onSetRef} collapsable={false} {...otherProps} />;\n  }\n}\n"]}